;;
;; Title: Interrupts management.
;;

;;
;; ushort: irqport
;; IRQ ports
;;
irqport = $1400
;;
;; ushort: irq_disable
;; Interrupts disable port.
;;
irq_disable = irqport+2
;;
;; ushort: irq_status
;; Interrupts status.
;;
irq_status  = irqport+3

;;
;; Group: IRQ indentifiers.
;;

;;
;; ubyte: INT_IRQ2
;; This interrupt is available on the HuCard and expension connectors. It is 
;; also triggered by the BRK instruction and the CD-ROM ADPCM hardware.
;;
INT_IRQ2 = 1<<0
;;
;; ubyte: INT_IRQ1
;; IRQ1 is triggered by the VDC. This means that the irq1 vector will be called
;; whenever a VDC interrupt occurs. Namely
;;   - Vertical blanking (vblank)
;;   - Scanline interrupt (hblank)
;;   - VRAM to VRAM DMA transfer end
;;   - VRAM to SATB DMA transfer end
;;   - Sprite overflow
;;   - Sprite collision
;;
;; A way to differentiate between those interrupts is to check the value of the
;; VDC status register.
;;
INT_IRQ1 = 1<<1
;;
;; ubyte: INT_TIMER
;; This TIMER interrupt is generated by the HuC6280's internal timer.
;;
INT_TIMER = 1<<2
;;
;; ubyte: INT_NMI
;; The NMI interrupt does not seem to be used.
;;
INT_NMI = 1<<3
;;
;; ubyte: INT_ALL
;; Bitfield grouping all interrupts.
;;
INT_ALL = INT_IRQ2 | INT_IRQ1 | INT_TIMER | INT_NMI

;;
;; macro: irq_on
;; Enable one or multiples IRQ interrupts.
;;
;; Assembly call:
;;   > irq_on    INT_TIMER |INT_IRQ2
;;
;; Parameter:
;;   i - IRQ bit field (see IRQ identifiers).
;;

;;
;; macro: irq_off
;; Disable one or multiples IRQ interrupts.
;;
;; Assembly call:
;;   > irq_off    INT_TIMER |INT_IRQ2
;;
;; Parameter:
;;   i - IRQ bit field (see IRQ identifiers).
;;

;;
;; Group: IRQ vectors.
;;

;;
;; ubyte: IRQ2 
;; Index of the user defined IRQ2 vector.
;;
IRQ2 = 0
;;
;; ubyte: IRQ1
;;
IRQ1 = 1
;;
;; ubyte: TIMER
;;
TIMER = 2
;;
;; ubyte: NMI
;;
NMI = 3
;;
;; ubyte: VSYNC
;;
VSYNC = 4
;;
;; ubyte: HSYNC
;;
HSYNC = 5
;;
;; ubyte: SOFT_RESET
;;
SOFT_RESET = 6

;;
;; macro: irq_enable_vec 
;; Enable IRQ vector.
;;
;;   - Bit 4 of irq_m is used to tell that the user vsync hook must be
;;     run.  
;;   - Bit 5 is for standard vsync hook.
;;   - Bit 6 and 7 are the same things but for hsync.
;;   - Standard and user [h|v]sync hooks are not mutually exclusive. If 
;;     both bits are set, first the standard handler will be called then
;;     the user one.
;;
;; Assembly call:
;;   > irq_enable_vec vec
;;
;; Parameter:
;;   vec - Vector to enable
;;

;;
;; macro: irq_disable_vec
;; Disable IRQ vector.
;;
;; Assembly call:
;;   > irq_enable_vec vec
;;
;; Parameter:
;;   vec - Vector to enable
;;

;;
;; macro: irq_set_vec
;; Set user interrupt functions.
;;
;; Warning:
;; A,X and Y will be overwritten.
;; Interrupts are disabled.
;;
;; Assembly call:
;;   > irq_set_vec vec, addr
;;
;; Parameters:
;;   vec - interrupt to hook.
;;   addr - user function to be called when interrupt will be triggered.
;;

;;
;; ubyte: irq_cnt
;; Interrupt counter.
;;
irq_cnt = $20f2
;;
;; ubyte: irq_m
;; Interrupt control mask.
;;
irq_m = $20f5

user_hook = $2200
irq2_hook  = user_hook + (IRQ2 * 2)
irq1_hook  = user_hook + (IRQ1 * 2)
timer_hook = user_hook + (TIMER * 2)
nmi_hook   = user_hook + (NMI * 2)
vsync_hook = user_hook + (VSYNC * 2)
hsync_hook = user_hook + (HSYNC * 2)
reset_hook = user_hook + (SOFT_RESET * 2)

  .ifdef MAGICKIT
    .include "pceas/irq.inc"
  .else
    .ifdef CA65
    .include "ca65/irq.inc"
    .endif
  .endif


; Timer port
timerport = $0c00
; Timer counter register.
; Only the first 6 bits are used. A value of $00 counts as 1, $7f as 128.
timer_cnt  = timerport
; Timer control register.
; Only the first bit is used. The timer is enabled if it is set to 0.
timer_ctrl = timerport+1

; Acknowledge timer interrupt
  .macro timer_ack
    stz    irq_status
  .endmacro

; Disable timer
  .macro timer_disable
    lda    #$01
    sta    timer_ctrl
  .endmacro

; Enable timer
  .macro timer_enable
    stz    timer_ctrl
  .endmacro

